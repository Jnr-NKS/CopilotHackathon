import tkinter as tk
import random

class MemoryGameUI:
    def __init__(self, root):
        self.root = root
        self.setup_start_screen()

    def setup_start_screen(self):
        self.clear_widgets()
        self.root.title("Memory Game - Setup")
        self.root.configure(bg="#f5f5f5")
        self.start_frame = tk.Frame(self.root, bg="#f5f5f5")
        self.start_frame.pack(pady=40)

        tk.Label(self.start_frame, text="Select Grid Size:", font=("Arial", 14, "bold"), bg="#f5f5f5").pack(pady=5)
        self.size_var = tk.IntVar(value=4)
        for size in [4, 6, 8]:
            tk.Radiobutton(self.start_frame, text=f"{size} x {size}", variable=self.size_var, value=size,
                           font=("Arial", 12), bg="#f5f5f5").pack(anchor="w")

        tk.Label(self.start_frame, text="Number of Players:", font=("Arial", 14, "bold"), bg="#f5f5f5").pack(pady=10)
        self.players_var = tk.IntVar(value=1)
        for num in [1, 2]:
            tk.Radiobutton(self.start_frame, text=f"{num} Player{'s' if num > 1 else ''}", variable=self.players_var, value=num,
                           font=("Arial", 12), bg="#f5f5f5").pack(anchor="w")

        tk.Button(self.start_frame, text="Start Game", font=("Arial", 12, "bold"), bg="#4caf50", fg="white",
                  command=self.start_game).pack(pady=20)

    def start_game(self):
        self.size = self.size_var.get()
        self.num_players = self.players_var.get()
        self.symbols = [chr(i) for i in range(65, 65 + self.size * self.size // 2)] * 2
        random.shuffle(self.symbols)
        self.board = [self.symbols[i*self.size:(i+1)*self.size] for i in range(self.size)]
        self.revealed = [[False]*self.size for _ in range(self.size)]
        self.buttons = [[None]*self.size for _ in range(self.size)]
        self.first = None
        self.second = None
        self.pairs_found = [0] * self.num_players
        self.moves = 0
        self.locked = False
        self.current_player = 0
        self.clear_widgets()
        self.create_widgets()

    def clear_widgets(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def create_widgets(self):
        self.root.title("Memory Game")
        self.frame = tk.Frame(self.root, bg="#f5f5f5")
        self.frame.pack(pady=20)
        # Remove any previous grid weights
        for i in range(self.size):
            self.frame.grid_rowconfigure(i, weight=1)
            self.frame.grid_columnconfigure(i, weight=1)
        for i in range(self.size):
            for j in range(self.size):
                btn = tk.Button(self.frame, text="", width=3 if self.size==8 else (4 if self.size==6 else 6), height=2 if self.size==8 else (2 if self.size==6 else 3), font=("Arial", 18 if self.size==4 else (14 if self.size==6 else 10), "bold"),
                                bg="#90caf9", fg="#1565c0", relief="raised",
                                command=lambda r=i, c=j: self.reveal_card(r, c))
                btn.grid(row=i, column=j, padx=2 if self.size>4 else 5, pady=2 if self.size>4 else 5, sticky="nsew")
                self.buttons[i][j] = btn
        self.status = tk.Label(self.root, text=self.status_text(), font=("Arial", 14, "bold"), bg="#f5f5f5", fg="#333")
        self.status.pack(pady=10)
        self.reset_btn = tk.Button(self.root, text="Restart", font=("Arial", 12, "bold"), bg="#4caf50", fg="white", command=self.reset_btn_action)
        self.reset_btn.pack(pady=5)

    def reset_btn_action(self):
        self.setup_start_screen()

    def status_text(self):
        if self.num_players == 1:
            return f"Moves: {self.moves} | Matches: {self.pairs_found[0]}"
        else:
            return (f"Player 1: {self.pairs_found[0]}  |  Player 2: {self.pairs_found[1]}  |  "
                    f"Moves: {self.moves}  |  Turn: Player {self.current_player+1}")

    def reveal_card(self, r, c):
        if self.locked or self.revealed[r][c]:
            return
        btn = self.buttons[r][c]
        btn.config(text=self.board[r][c], bg="#fff59d", fg="#f57c00", relief="sunken")
        self.revealed[r][c] = True
        if not self.first:
            self.first = (r, c)
        elif not self.second:
            self.second = (r, c)
            self.moves += 1
            self.status.config(text=self.status_text())
            self.locked = True
            self.root.after(600, self.check_match)

    def check_match(self):
        r1, c1 = self.first
        r2, c2 = self.second
        if self.board[r1][c1] == self.board[r2][c2]:
            self.buttons[r1][c1].config(bg="#a5d6a7", fg="#1b5e20")
            self.buttons[r2][c2].config(bg="#a5d6a7", fg="#1b5e20")
            self.pairs_found[self.current_player] += 1
            if sum(self.pairs_found) == (self.size * self.size) // 2:
                self.end_game()
            else:
                self.status.config(text=self.status_text())
            self.first = None
            self.second = None
            self.locked = False
        else:
            self.root.after(900, self.hide_cards)

    def hide_cards(self):
        r1, c1 = self.first
        r2, c2 = self.second
        self.buttons[r1][c1].config(text="", bg="#90caf9", fg="#1565c0", relief="raised")
        self.buttons[r2][c2].config(text="", bg="#90caf9", fg="#1565c0", relief="raised")
        self.revealed[r1][c1] = False
        self.revealed[r2][c2] = False
        self.first = None
        self.second = None
        if self.num_players == 2:
            self.current_player = 1 - self.current_player
        self.locked = False
        self.status.config(text=self.status_text())

    def end_game(self):
        if self.num_players == 1:
            msg = f"Congratulations! You won in {self.moves} moves."
        else:
            if self.pairs_found[0] > self.pairs_found[1]:
                winner = "Player 1 wins!"
            elif self.pairs_found[1] > self.pairs_found[0]:
                winner = "Player 2 wins!"
            else:
                winner = "It's a tie!"
            msg = f"Game Over! {winner}  (P1: {self.pairs_found[0]}, P2: {self.pairs_found[1]})"
        self.status.config(text=msg)

if __name__ == "__main__":
    root = tk.Tk()
    app = MemoryGameUI(root)
    root.mainloop()
